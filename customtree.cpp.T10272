 #include "customtree.h"

CustomTree::CustomTree(QObject *parent) : QObject(parent)
{
        copy   = new QAction(QString::fromUtf8("Копировать")   ,this);
        cut    = new QAction(QString::fromUtf8("Вырезать")     ,this);
        paste  = new QAction(QString::fromUtf8("Вставить")     ,this);
        paste->setEnabled(false);
        erase  = new QAction(QString::fromUtf8("Удалить")      ,this);
        rename = new QAction(QString::fromUtf8("Переименовать"),this);
        mkdir  = new QAction(QString::fromUtf8("Создать")      ,this);

        this->menu->addAction(copy);
        this->menu->addAction(cut);
        this->menu->addAction(paste);
        this->menu->addAction(erase);
        this->menu->addAction(rename);
        this->menu->addAction(mkdir);

        QObject::connect(this->copy,SIGNAL(triggered(bool)),
                         this,SLOT(popupCopy()));

        QObject::connect(this->cut,SIGNAL(triggered(bool)),
                         this,SLOT(popupCut()));

        QObject::connect(this->rename,SIGNAL(triggered(bool)),
                         this,SLOT(popupRename()));

        QObject::connect(this->erase,SIGNAL(triggered(bool)),
                         this,SLOT(popupErase()));

        QObject::connect(this->paste,SIGNAL(triggered(bool)),
                         this,SLOT(popupPaste()));

        QObject::connect(this->mkdir,SIGNAL(triggered(bool)),
                         this,SLOT(popupMkdir()));
}
void CustomTree::drawPath()
{
    auto index = tree->currentIndex();

    auto index2 = index;
    QString str =
     tree->model()->sibling(index2.row(),0,index2).data().toString();
    index2 = index2.parent();

    while ( index2.parent().data().toString() != NULL )
    {
        str = index2.data().toString() + "/" + str;
        index2 = index2.parent();
    }
    str.insert(0,tab->tabText(tab->currentIndex()));

    adressLine->setText(str);
    fileNameLine->setText(index.sibling(index.row(),0).data().toString());
}
void CustomTree::openItem()
{
    if ( adressLine->text() != NULL )
    {
        QString str = "file:///";
        str.append(adressLine->text());
        QDesktopServices::openUrl(
         QUrl(str,
         QUrl::TolerantMode));
    }
}
void CustomTree::popUp()
{
    itemsSelected = this->tree->selectionModel()->selectedIndexes().length();
        if ( itemsSelected != 0 )
        {  if (empty) paste->setEnabled(true);
             else paste->setEnabled(false);

            this->copy->setEnabled(true);
            this->cut->setEnabled(true);
            this->rename->setEnabled(true);
            this->erase->setEnabled(true);
        } else {
            this->copy->setEnabled(false);
            this->cut->setEnabled(false);
            this->rename->setEnabled(false);
            this->erase->setEnabled(false);
        }
        if (this->tree->currentIndex().isValid() && !model->isDir(this->tree->currentIndex()) )
            this->mkdir->setEnabled(false);
             else this->mkdir->setEnabled(true);
        menu->popup(QCursor::pos());
}

void CustomTree::popupCopy()
{
    if ( itemsSelected != 0)
    {
        vec.clear();
        for (int i = 0; i < itemsSelected ; i++)
        {
            vec.push_back(this->tree->selectionModel()->selectedIndexes());
        }

        empty = false;
    }
    qDebug() << vec.at(1);
}
void CustomTree::popupCut()
{

}
void CustomTree::popupPaste()
{
    if ( !empty )
    {

    }

}
void CustomTree::popupErase()
{
    if ( itemsSelected != 0 ) eraseDir(this->tree->currentIndex());
}
void CustomTree::popupRename()
{
    if ( itemsSelected != 0 ) tree->model()->sibling(index.row(),0,index).data().toString();
        //this->tree->edit(this->tree->currentIndex());
}
void CustomTree::popupMkdir()
{
    QModelIndex index;
    if ( itemsSelected != 0 )
        index = this->tree->currentIndex();
    else
        index = this->tree->rootIndex();

    QString name = QInputDialog::getText(tree, tr("Create directory"), tr("Directory name"));
    if ( !name.isEmpty() )
    {
        if ( !model->isDir(index) ) {
            index = model->parent(index);
        }
        if ( !model->mkdir(index, name).isValid() ) {
            QMessageBox::information(tree, tr("Create directory failed..."), tr("Failed to create directory"));
        }
    }
}
void CustomTree::addTree(QTreeView *tree)
{
    this->tree = tree;
    this->tree->setDragEnabled(true);
    this->tree->setAcceptDrops(true);
    this->tree->setEditTriggers(QAbstractItemView::NoEditTriggers);
    this->tree->setSelectionMode(QTreeView::ContiguousSelection);
    this->tree->setContextMenuPolicy(Qt::CustomContextMenu);
    this->tree->setColumnWidth(0,200);
    this->tree->setColumnWidth(1,70);
    this->tree->setColumnWidth(2,60);
    this->tree->setSortingEnabled(true);

        QObject::connect(this->tree,SIGNAL(clicked(QModelIndex)),
                         this,SLOT(drawPath()));

        QObject::connect(this->tree,SIGNAL(doubleClicked(QModelIndex)),
                         this,SLOT(openItem()));

        QObject::connect(this->tree,SIGNAL(customContextMenuRequested(QPoint)),
                         this,SLOT(drawPath()));

        QObject::connect(this->tree,SIGNAL(customContextMenuRequested(QPoint)),
                         this,SLOT(popUp()   ));
}
bool CustomTree::eraseDir(QModelIndex index)
{
    while ( index.isValid() )
    //if ( index.isValid() )
    {
        QFileSystemModel * loc = this->model; // Local Model
        QFileInfo file = loc->fileInfo(index);
        if ( file.isDir() )
        {
            if ( loc->hasChildren(index) )
            {
                eraseDir(index.child(0,0));
                loc->remove(index);
                qDebug() << 1 << index.data().toString();
            }
        } else
        {
            qDebug() << 3 << index.data().toString();
            loc->remove(index);
        }
    }
    return 1;
}

void CustomTree::changeSortOrder()
{

}




/*if ( !ok ) {
    QMessageBox::information(tree, tr("Removed"),
        tr("Filed to remove %1").arg(model->fileName(index)));
            } else return 1; */











